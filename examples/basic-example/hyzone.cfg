PROJECT_NAME="myproject"

# Hyzone is not easy to learn if you're not familiar with Bash and Docker.
# You need to read carefully docker commands to understand what is going on.

# Uncomment `generate_random_prefix` and see that containers and docker network is prefixed
# with randomly generated prefix but all commands remain the same i.e. prefix-less

# generate_random_prefix

app_dockerfile=Dockerfile.App
app2_dockerfile=Dockerfile.App

# To run type: hyzone run app
app () {
  mkdir -p .gradle

  docker run \
    -v "$(pwd)/.gradle:/root/.gradle" \
    $HYZONE_OPTS \
    java App
}

# Alternate method to run app
app2 () {
  mkdir -p .gradle

  docker run -v "$(pwd):/w" -w /w --rm $HYZONE_OPTS javac App.java

  docker run \
    -v "$(pwd)/.gradle:/root/.gradle" \
    -v "$(pwd):/w" \
    -w /w \
    $HYZONE_OPTS \
    java App
}

# Quick start:
#   $ hyzone run nginx
#   $ hyzone ps
#   $ hyzone curl http://nginx:80
#   $ hyzone kill nginx
nginx () {
  docker run -d -v "$(pwd):/usr/share/nginx/html:ro" $HYZONE_OPTS nginx
}

# Run
#     
#     $ hyzone run nginx
#     $ hyzone run app3
#
# You achieve same effect with
#
#     $ hyzone curl -v "http://nginx:80"
#
# As you see you can access container via domain name
# that is the same as container name.
#
# hyzone curl runs `curl` inside special container
# that is in the same network as nginx (network name
# is $PROJECT_NAME).
app3 () {
  docker run $HYZONE_OPTS java:8 curl -D - "http://nginx:80"
}

# To run type: hyzone run postgres
# Note: It will take a little longer because it will wait for database to actually
#       accept new connections because we're using `wait-for-line` function,
#       which waits for line to appear in container logs (searched with grep).
postgres () {
  docker run -d -e POSTGRES_PASSWORD=123 $HYZONE_OPTS postgres

  # tail logs until mentioned text is outputted from postgres then stop blocking
  wait-for-line postgres "database system is ready to accept connections"
}

# Remote connection via `docker run`
#
#   $ hyzone run sql
#
# Use `123` as password, as specified above in `postgres` function
psql () {
  wait-for-line postgres "database system is ready to accept connections"
  hyzone run -ti $HYZONE_OPTS postgres psql -h postgres -U postgres
}

# Local connection via `docker exec`
# $ hyzone run sql2
psql2 () {
  wait-for-line postgres "database system is ready to accept connections"
  hyzone exec -ti postgres psql -U postgres
}

# Type
#
#     $ hyzone kill
#
# To kill all containers in this context

# Run
#     $ hyzone run all
#
# Basically `hyzone run` works like this
#
#     $ hyzone run <function_name_from_this_file>
#
# with addition that inside functions $HYZONE_OPTS is available,
# but you don't need to use it and you can just execute some bash
# function from this file, like `all` function.
all () {
  hyzone run app
  hyzone run nginx
  hyzone run postgres
}

# Run `hyzone kill) and then run `hyzone run all_ci` to run
# environment in another fashion (it's up to you how you want
# to setup environment startup `all` and `all_ci` functions
# are just examples) 
all_ci () {
  hyzone run app2
  hyzone run nginx
  hyzone run postgres

  hyzone exec -ti nginx service nginx status

  set +e
  [ "$(hyzone curl -s nginx:80 | grep "Hello world")" ]

  st=$?
  echo "Nginx status: $(if [ "$st" -eq 0 ]; then echo "OK"; else echo "NOT OK"; fi)"
  set -e
}