PROJECT_NAME="myproject"

# Uncomment this and see that containers and docker network is prefixed
# with randomly generated prefix but all commands remain the same i.e. prefix-less
generate_random_prefix

app_dockerfile=Dockerfile.App
app2_dockerfile=Dockerfile.App

# To run type: hyzone run app
app () {
  mkdir -p .gradle

  docker run \
    -v "$(pwd)/.gradle:/root/.gradle" \
    $HYZONE_OPTS \
    java App
}

# Alternate method to run app
app2 () {
  mkdir -p .gradle

  docker run -v "$(pwd):/w" -w /w --rm $HYZONE_OPTS javac App.java

  docker run \
    -v "$(pwd)/.gradle:/root/.gradle" \
    -v "$(pwd):/w" \
    -w /w \
    $HYZONE_OPTS \
    java App
}

# Verify domains are available as function names
#     $ hyzone run app3
# You can check the same thing with
#     $ hyzone curl -v "http://nginx:80"
# which runs `curl` in specially prepared docker container
app3 () {
  docker run $HYZONE_OPTS java:8 curl -D - "http://nginx:80"
}

# Quick start:
# $ hyzone run nginx
# $ hyzone ps
# $ hyzone curl http://nginx:80
# Note: we `curl` using 'nginx' domain name which is the same as below function name
#       and container name (if no generate_random_prefix was run)
nginx () {
  docker run -d -v "$(pwd):/usr/share/nginx/html:ro" $HYZONE_OPTS nginx
}

# To run type: hyzone run postgres
# Note: It will take a little longer because it will wait for database to actually
#       accept new connections.
postgres () {
  docker run -d -e POSTGRES_PASSWORD=123 $HYZONE_OPTS postgres

  # tail logs until mentioned text is outputted from postgres then stop blocking
  wait-for-line postgres "database system is ready to accept connections"
}

# Remote connection via `docker run`
# $ hyzone run sql
psql () {
  wait-for-line postgres "database system is ready to accept connections"
  hyzone run -ti $HYZONE_OPTS postgres psql -h postgres -U postgres
}

# Local connection via `docker exec`
# $ hyzone run sql2
psql2 () {
  wait-for-line postgres "database system is ready to accept connections"
  hyzone exec -ti postgres psql -U postgres
}

# To run
#     $ hyzone run all
# Basically `hyzone run` works like this
#     $ hyzone run <function_name_from_this_file>
# with addition that inside functions $HYZONE_OPTS is available
all () {
  hyzone run app
  hyzone run nginx
  hyzone run postgres
}

# Define other way to run whole environment
#     $ hyzone run all_ci
all_ci () {
  hyzone run app2
  hyzone run nginx
  hyzone run postgres

  hyzone exec -ti nginx service nginx status

  set +e
  [ "$(hyzone curl -s nginx:80 | grep "Hello world")" ]

  st=$?
  echo "Nginx status: $(if [ "$st" -eq 0 ]; then echo "OK"; else echo "NOT OK"; fi)"
  set -e
}